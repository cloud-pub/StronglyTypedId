namespace Some.Namespace
{
    [Newtonsoft.Json.JsonConverter(typeof(MyTestIdNewtonsoftJsonConverter))]
    [System.Text.Json.Serialization.JsonConverter(typeof(MyTestIdSystemTextJsonConverter))]
    readonly partial struct MyTestId : System.IComparable<MyTestId>, System.IEquatable<MyTestId>
    {
        public string Value { get; }

        public MyTestId(string value)
        {
            Value = value;
        }

        public static readonly MyTestId Empty = new MyTestId(string.Empty);

        public bool Equals(MyTestId other) => this.Value.Equals(other.Value);
        public int CompareTo(MyTestId other) => Value.CompareTo(other.Value);

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is MyTestId other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value.ToString();
        public static bool operator ==(MyTestId a, MyTestId b) => a.CompareTo(b) == 0;
        public static bool operator !=(MyTestId a, MyTestId b) => !(a == b);

        public static readonly MyTestIdEfCoreValueConverter EfCoreValueConverter = new MyTestIdEfCoreValueConverter();

        public class MyTestIdEfCoreValueConverter : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<MyTestId, string>
        {
            public MyTestIdEfCoreValueConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
                : base(
                    id => id.Value,
                    value => new MyTestId(value),
                    mappingHints
                ) { }
        }

        class MyTestIdNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(MyTestId);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (MyTestId)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                return new MyTestId(serializer.Deserialize<string>(reader));
            }
        }

        class MyTestIdSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<MyTestId>
        {
            public override MyTestId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                return new MyTestId(reader.GetString());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, MyTestId value, System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStringValue(value.Value);
            }
        }
    }
}
